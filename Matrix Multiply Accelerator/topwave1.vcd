$date
	Mon Jul 07 16:37:25 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb1 $end
$var wire 16 ! mac_output [15:0] $end
$var reg 1 " clk $end
$var reg 1 # enable $end
$var reg 1 $ reset $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 1 # enable $end
$var wire 1 $ reset $end
$var wire 8 % wire_b [7:0] $end
$var wire 8 & wire_a [7:0] $end
$var wire 16 ' mac_output [15:0] $end
$var reg 8 ( a0_reg [7:0] $end
$var reg 8 ) a1_reg [7:0] $end
$var reg 8 * a2_reg [7:0] $end
$var reg 8 + a3_reg [7:0] $end
$var reg 8 , b0_reg [7:0] $end
$var reg 8 - b1_reg [7:0] $end
$var reg 8 . b2_reg [7:0] $end
$var reg 8 / b3_reg [7:0] $end
$scope module fsm1_inst $end
$var wire 8 0 a0 [7:0] $end
$var wire 8 1 a1 [7:0] $end
$var wire 8 2 a2 [7:0] $end
$var wire 8 3 a3 [7:0] $end
$var wire 8 4 b0 [7:0] $end
$var wire 8 5 b1 [7:0] $end
$var wire 8 6 b2 [7:0] $end
$var wire 8 7 b3 [7:0] $end
$var wire 1 " clk $end
$var wire 1 $ reset $end
$var reg 8 8 a_out [7:0] $end
$var reg 8 9 b_out [7:0] $end
$var reg 3 : counter [2:0] $end
$upscope $end
$scope module mac_inst $end
$var wire 8 ; a [7:0] $end
$var wire 8 < b [7:0] $end
$var wire 1 " clk $end
$var wire 1 # enable $end
$var wire 16 = mac_out [15:0] $end
$var wire 1 $ reset $end
$var reg 16 > acc_reg [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
b111 7
b110 6
b101 5
b100 4
b100 3
b11 2
b10 1
b1 0
b111 /
b110 .
b101 -
b100 ,
b100 +
b11 *
b10 )
b1 (
bx '
bx &
bx %
1$
0#
0"
bx !
$end
#5
b0 !
b0 '
b0 =
b0 >
b0 :
1"
#6
0$
#10
0"
#15
b100 %
b100 9
b100 <
b1 &
b1 8
b1 ;
b1 :
1"
#17
1#
#20
0"
#25
b100 !
b100 '
b100 =
b100 >
b101 %
b101 9
b101 <
b10 &
b10 8
b10 ;
b10 :
1"
#30
0"
#35
b110 %
b110 9
b110 <
b11 &
b11 8
b11 ;
b11 :
b1110 !
b1110 '
b1110 =
b1110 >
1"
#40
0"
#45
b100000 !
b100000 '
b100000 =
b100000 >
b111 %
b111 9
b111 <
b100 &
b100 8
b100 ;
b100 :
1"
#50
0"
#55
b0 :
b111100 !
b111100 '
b111100 =
b111100 >
1"
#60
0"
#65
b1011000 !
b1011000 '
b1011000 =
b1011000 >
b100 %
b100 9
b100 <
b1 &
b1 8
b1 ;
b1 :
1"
#70
0"
#75
b101 %
b101 9
b101 <
b10 &
b10 8
b10 ;
b10 :
b1011100 !
b1011100 '
b1011100 =
b1011100 >
1"
#80
0"
#85
b1100110 !
b1100110 '
b1100110 =
b1100110 >
b110 %
b110 9
b110 <
b11 &
b11 8
b11 ;
b11 :
1"
#90
0"
#95
b111 %
b111 9
b111 <
b100 &
b100 8
b100 ;
b100 :
b1111000 !
b1111000 '
b1111000 =
b1111000 >
1"
#100
0"
